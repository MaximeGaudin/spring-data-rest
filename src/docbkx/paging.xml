<?xml version="1.0" encoding="UTF-8"?>
<chapter xml:id="paging-chapter"
         xmlns="http://docbook.org/ns/docbook"
         xmlns:xlink="http://www.w3.org/1999/xlink"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://docbook.org/ns/docbook http://www.oasis-open.org/docbook/xml/5.0/xsd/docbook.xsd
         http://www.w3.org/1999/xlink http://www.oasis-open.org/docbook/xml/5.0/xsd/xlink.xsd">

  <title>Paging and Sorting</title>

  <section>
    <title>Paging</title>

    <para>Rather than return everything from a large result set, Spring Data REST recognizes some URL parameters that
      will
      influence the page size and starting page number. To add paging support to your Repositories, you need to extend
      the
      <classname>PagingAndSortingRepository&lt;T,ID&gt;</classname>
      interface rather than the basic
      <classname>CrudRepository&lt;T,ID&gt;</classname>
      interface. This adds methods that accept a
      <classname>Pageable</classname>
      to control the number and page of results returned.

      <programlisting language="java"><![CDATA[public Page findAll(Pageable pageable);]]></programlisting>
    </para>

    <para>If you extend
      <classname>PagingAndSortingRepository&lt;T,ID&gt;</classname>
      and access the list of all entities, you'll get links to the first 20 entities. To set the page size to any other
      number, add a limit parameter:

      <programlisting><![CDATA[http://localhost:8080/people/?limit=50]]></programlisting>
    </para>

    <para>To get paging in your query methods, you must change the signature of your query methods to accept a
      <classname>Pageable</classname>
      as a parameter and return a
      <classname>Page&lt;T&gt;</classname>
      rather than a
      <classname>List&lt;T&gt;</classname>. Otherwise, you won't get any paging information in the JSON and
      specifying the query parameters that control paging will have no effect.
    </para>

    <para>By default, the URL query parameters recognized are
      <code>page</code>, to specify page number
      <code>limit</code>, to specify how many results to return on a page, and
      <code>sort</code>
      to specify the query method parameter on which to sort. To change the names of the query parameters, simply call
      the appropriate method on
      <classname>RepositoryRestConfiguration</classname>
      and give it the text you would like to use for the query parameter. The following, for example, would set the
      paging parameter to
      <code>p</code>, the limit parameter to
      <code>l</code>, and the sort parameter to
      <code>q</code>:

      <programlisting language="java"><![CDATA[
@Override protected void configureRepositoryRestConfiguration(RepositoryRestConfiguration config) {
  config.setPageParamName("p")
        .setLimitParamName("l")
        .setSortParamName("q");
}]]></programlisting>
    </para>

    <para>The URL to use these parameters would then be changed to:

      <programlisting><![CDATA[http://localhost:8080/people/?p=2&l=50]]></programlisting>
    </para>

    <section>
      <title>Previous and Next Links</title>

      <para>Each paged response will return links to the previous and next pages of results based on the current page.
        If
        you are currently at the first page of results, however, no "previous" link will be rendered. The same is true
        for
        the last page of results: no "next" link will be rendered if you are on the last page of results. The "rel"
        value
        of the link will end with ".next" for next links and ".prev" for previous links.

        <programlisting><![CDATA[{
  "rel" : "people.next",
  "href" : "http://localhost:8080/people?page=2&limit=20"
}]]></programlisting>
      </para>
    </section>
  </section>

  <section>
    <title>Sorting</title>

    <para>Spring Data REST also recognizes sorting parameters that will use the Repository sorting support.</para>

    <para>To have your results sorted on a particular property, add a sort URL parameter with the name of the property
      you want to sort the results on. You can control the direction of the sort by specifying a URL parameter composed
      of the property name plus
      <code>.dir</code>
      and setting that value to either
      <code>asc</code>
      or<code>desc</code>. The following would use the
      <code>findByNameStartsWith</code>
      query method defined on the
      <classname>PersonRepository</classname>
      for all
      <classname>Person</classname>
      entities with names starting with the letter "K" and add sort data that orders the results on the name property in
      descending order:

      <programlisting>
        <![CDATA[curl -v http://localhost:8080/people/search/nameStartsWith?name=K&sort=name&name.dir=desc]]></programlisting>
    </para>
  </section>
</chapter>